# -*- coding: utf-8 -*-
"""task 1 meghana mn

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Kljz3_ujeN3ts_wxbF51YeoxuL9TU6D
"""

!git <lone https://github.com/meghanagithubrit/meghanagithubrit.git

"""## Step 1: Import Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder

"""# Step 2: Load **Dataset**"""

df = pd.read_csv("/content/archive.zip")

"""# Display first few rows"""

print(df.head())
print("\nDataset Info:")
print(df.info())
print("\nMissing Values:")
print(df.isnull().sum())

"""# Step 3: Handle Missing Values
### Example: Fill numerical with median, categorical with mode
"""

for col in df.columns:
    if df[col].dtype in ['int64', 'float64']:
        df[col].fillna(df[col].median(), inplace=True)
    else:
        df[col].fillna(df[col].mode()[0], inplace=True)

print("\nMissing Values After Imputation:")
print(df.isnull().sum())

"""# Step 4: Encode Categorical Variables
# Use Label Encoding for simplicity
"""

label_encoders = {}
for col in df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

print("\nEncoded Dataset Sample:")
print(df.head())

"""# Step 5: Normalize / Standardize Numerical Features"""

scaler = StandardScaler()
num_cols = df.select_dtypes(include=['int64', 'float64']).columns
df[num_cols] = scaler.fit_transform(df[num_cols])

print("\nStandardized Dataset Sample:")
print(df.head())

"""# Step 6: Detect Outliers Using Boxplots"""

plt.figure(figsize=(12, 6))
for i, col in enumerate(num_cols, 1):
    plt.subplot(2, len(num_cols)//2 + 1, i)
    sns.boxplot(data=df, y=col)
    plt.title(col)
plt.tight_layout()
plt.show()

"""# Step 7: Remove Outliers (IQR Method)

"""

def remove_outliers_iqr(data, col):
    Q1 = data[col].quantile(0.25)
    Q3 = data[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR
    return data[(data[col] >= lower) & (data[col] <= upper)]

for col in num_cols:
    df = remove_outliers_iqr(df, col)

print("\nShape after Outlier Removal:", df.shape)

df.to_csv("/content/archive.zip", index=False)
print(" Cleaned dataset saved as titanic_cleaned.csv")